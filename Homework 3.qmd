---
title: "Homework 3"
author: "Kirya Wagner"
GitHub Link: "https://github.com/kiryawagner/Wagner-Kirya-Homework-03"
format:
  html: 
    toc: true # includes a table of contents in rendered html format
execute: # for all code chunks
    warning: false # do not display warnings
    message: false # do not display messages
---


```{r, echo = FALSE}

# Set up
## reading in packages

# general use
library(tidyverse)
library(readxl)
library(here)
library(janitor)

# visualizing pairs
library(GGally)

# model selection
library(MuMIn)

# model predictions
library(ggeffects)

# model tables
library(gtsummary)
library(flextable)
library(modelsummary)

library(tinytable)

drought_exp <- read_xlsx(path = here("data", 
                                     "Valliere_etal_EcoApps_Data.xlsx"),
                         sheet = "First Harvest")
```

```{r, echo = FALSE}
# cleaning
drought_exp_clean <- drought_exp %>% 
  clean_names() %>% # nicer column names
  mutate(species_name = case_when( # adding column with species scientific names
    species == "ENCCAL" ~ "Encelia californica", # bush sunflower
    species == "ESCCAL" ~ "Eschscholzia californica", # California poppy
    species == "PENCEN" ~ "Penstemon centranthifolius", # Scarlet bugler
    species == "GRICAM" ~ "Grindelia camporum", # great valley gumweed
    species == "SALLEU" ~ "Salvia leucophylla", # Purple sage
    species == "STIPUL" ~ "Nasella pulchra", # Purple needlegrass
    species == "LOTSCO" ~ "Acmispon glaber" # deerweed
  )) %>% 
  relocate(species_name, .after = species) %>% # moving species_name column after species
  mutate(water_treatment = case_when( # adding column with full treatment names
    water == "WW" ~ "Well watered",
    water == "DS" ~ "Drought stressed"
  )) %>% 
  relocate(water_treatment, .after = water) # moving water_treatment column after water
```

```{r, echo = FALSE}
## 0. Null model
model0 <- lm(total_g ~ 1, # formula
             data = drought_exp_clean) # data frame

# diagnostics okay 
```

```{r, echo = FALSE}
## 1. total biomass as a function of SLA, water treatment, and species (saturated model)

model1 <- lm(total_g ~ sla + water_treatment + species_name,
             data = drought_exp_clean)

par(mfrow = c(2, 2))

# Diagnostics looks ok!
```

```{r, echo = FALSE}
# 2. total biomass as a function of SLA and water treatment

model2 <- lm(total_g ~ sla + water_treatment,
             data = drought_exp_clean)

# diagnostics look good 
```

```{r, echo = FALSE}
## 3. total biomass as a function of SLA and species

model3 <- lm(total_g ~ sla + species_name,
             data = drought_exp_clean)

# The QQ plot slightly derails from the line at the tails, but the diagnostics overall look okay. 
```

```{r, echo = FALSE}
## 4. total biomass as a function of water treatment and species

model4 <- lm(total_g ~ water_treatment + species_name,
             data = drought_exp_clean)

# diagnostics look okay 
```

```{r, echo = FALSE, results = FALSE}
# Model selection
# compare functions 

model.sel(model0,
          model1, 
          model2, 
          model3,
          model4)
#Out of the four models we have tried, the best model is **model 4, the one that includes biomass as a function water treatment and species**. This is because its delta is 0, and it has the lowest AIC. 
```

```{r, echo = FALSE, results = FALSE}
# Model summary
summary(model4)
```

```{r, echo = FALSE}
# Model predictions 
model_preds <- ggpredict(model4, 
                         terms = c("water_treatment", 
                                   "species_name"))

# use View(model_preds) to see the predictions as a data frame
# use model_preds to see the predictions formatted nicely
```


# Problem 1

## a. Making a table

Table 1: Table displaying model estimates for the null and models 1-4.

```{r, results = FALSE}
# comparing models
modelsummary::modelsummary # this function takes a list of models
```

```{r}
models <- list( 
    "null" = model0, # "model name" = model object
    "model 1" = model1,
    "model 2" = model2,
    "model 3" = model3,
    "model 4" = model4)
```

```{r, echo = FALSE}

modelsummary(models)
```

**Note 1: notice all the information at the bottom of the `modelsummary` output - if you only needed the AIC and delta AIC, what could you do? see package documentation for help**
**Note 2: you will always have to report the F-statistic, degrees of freedom, test statistic, p-value, ⍺, and R^2^. Whether or not this information is in a table is up to you.**


## b. Statistical methods 

In this statistical analysis, I examined the influence of specific leaf area (SLA), species, and water treatment on total growth (g) of the plant by constructing a set of 5 models that compared each variable. These included total biomass as a function of none of the predictors, total biomass as a function of SLA, water treatment and species, total biomass as a function of SLA and water treatment, total biomass as a function of SLA and species, and total biomass as a function of water treatment and species. 

First, I visualized the variables individually against total mass with ggpairs and ggplot, and determined that there seemingly was a correlation between each one. Then I created the models using lm(), and looked at the residuals, distributions, and outliers within their diagnostics to determine if the model was valid.

Next, I compared each model using model.sel(), and determined which one was the best based on their diagnostics and coefficients. The best model not only has a lower AIC and delta of 0, but also visually needs homeostatic residuals, a normal distribution and no influential outliers in their diagnostics.


## c. Visualization

```{r model-predictions-with-ggeffects}
# creating new data frame of model predictions for plotting
model_preds_for_plotting <- model_preds %>% 
  rename(water_treatment = x,
         species = group) # renaming columns to make this easier to use

ggplot() +
  # underlying data
  geom_point(data = drought_exp_clean,
             aes(x = water_treatment,
                 y = total_g,
                 color = water_treatment,
                  alpha = 0.3)) +

  # model prediction lines
  geom_line(data = model_preds_for_plotting,
            aes(x = water_treatment, 
                y = predicted,
                color = water_treatment)) +
  
  # cleaner theme
  theme_classic() +
  theme(legend.position = "none") +
  scale_color_manual(values = c("cornflowerblue", "violet")) + # giving each water type a different color 
  
  # creating different panels for species
  facet_wrap(~species_name) +
  
  labs(x = "Water Treatment", # naming x axis 
     y = "Total Mass (g)", # naming y axis
     title = "Total Mass of Species with Different Water Treatments ") # making a title

```

## d. Figure Caption 

Figure 1: Jitter plot visualizing the total mass of plant species in well watered vs drought stressed water treatments. Well watered plants were represented with blue while drought stressed plants are represented with pink. Large opague dots represent the mean total mass (g). Lines represent model predition lines. Trasnparent dots represent underlying data. 

Source: Valliere JM, Zhang J, Sharifi MR, Rundel PW. Can we condition native plants to increase drought tolerance and improve restoration success? Ecol Appl. 2019 Apr;29(3):e01863. doi: 10.1002/eap.1863. Epub 2019 Mar 4. PMID: 30831005.

## e. Results 

My statistical analysis suggests that species and water treatment, or model 4, best influence plant total mass 

(Multiple linear regression model, ?normal distribution, F-statistic(62 DF) = 27.08, p-value < 0.001 (p=2.2e-16), α = 0.05, R^2 = 0.75)

model type, distribution, degrees of freedom, F-statistic, p-value, alpha, R^2^

On average across species, well watered plants tend to be 0.12 ± 0.02g heavier than drought stressed plants. Water treatment significantly predicts total mass (p < 0.001).. 
Across water treatments on average, _Lotus scoparius_ plants were -0.20 ± 0.032 g less than _Encelia californica_ (p < 0.001), and "Grindelia camporum" plants were -0.31 ± 0.032 less than _Encelia californica_ plants (p < 0.001). 

# Problem 2 

## a.
Because I have time as a variable ranging from 1-10 in my data, I could indicate each minute with a different visual, like a shape or color. This could be separated by another variable like class location, mode of transportation or day of the week. Also, with the variable distance to class, I could also make some sort of map. This is especially relevant because all of the class locations are on campus, which is a relatively small area to draw. 

## b. 
sketch
## c. 
draft 

## d.
In my affective visualization, each colored line indicates an observation in order of time, which is minutes arrived early to class. The key on the left decodes these colors from 1 minute early on the top, to 10 minutes early on the bottom. There are five groups separated by class location and labeled on the right hand side. 

I was primarily inspired by Ed Hawkin's "warming stripes" where numerical temperature is represented by a color to showcase a pattern of increasing global temperatures. Similarly, the colors in my piece can help visualize if there is a pattern in arrival time based on class location.

This visual is a poster created in Canva, using their line tool. Each indivdual line was hand drawn and colored based on my data.

# Problem 3


